version: 2
jobs:
  build:
    working_directory: ~/repo
    # The primary container is an instance of the first list image listed. Your build commands run in this container.
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install MVN Dependencies
          command: mvn dependency:go-offline
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo
      - run:
          name: Build Parent
          command: cd ./coffee_shop_parent && mvn package -Dmaven.test.skip=true # run the actual tests
      - run:
          name: Build Common
          command: cd ../coffee_shop_common && mvn package -Dmaven.test.skip=true # run the actual tests
      - run:
          name: Build auth
          command: cd ../coffee_shop_auth && mvn package -Dmaven.test.skip=true # run the actual tests
  test:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
  dev_deploy:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Run setup script
          command: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "67:8a:81:99:06:82:34:85:79:37:65:e3:59:59:c1:e4"
      - run:
          name: Deploy Dev to Heroku
          command: |
            git push --force git@heroku.com:deloitte-arb.git HEAD:refs/heads/master
  sit_deploy:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Run setup script
          command: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "67:8a:81:99:06:82:34:85:79:37:65:e3:59:59:c1:e4"
      - run:
          name: Deploy SIT to Heroku
          command: |
            git push --force git@heroku.com:deloitte-arb.git HEAD:refs/heads/master
  prod_deploy:
    working_directory: ~/repo
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Run setup script
          command: bash .circleci/setup-heroku.sh
      - add_ssh_keys:
          fingerprints:
            - "67:8a:81:99:06:82:34:85:79:37:65:e3:59:59:c1:e4"
      - run:
          name: Deploy Master to Heroku
          command: |
            git push --force git@heroku.com:deloitte-arb.git HEAD:refs/heads/master
workflows:
  version: 2
  dev_build_and_test:
    jobs:
      - build:
          filters:
            branches:
              only: develop
      - test:
          requires:
            - build
          filters:
            branches:
              only: develop
      - dev_deploy:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: develop
  sit_build_and_test:
    jobs:
      - build:
          filters:
            branches:
              only: sit
      - test:
          requires:
            - build
          filters:
            branches:
              only: sit
      - sit_deploy:
          requires:
            - test
          filters:
            branches:
              only: sit
  prod_build_and_test:
    jobs:
      - build:
          filters:
            branches:
              only: master      
          filters:
            branches:
              only: master
